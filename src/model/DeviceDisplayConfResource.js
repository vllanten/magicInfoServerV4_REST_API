/**
 * magic info api
 * magic info api
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeviceDisplayConfSubResource', 'model/DeviceDisplayCustomLogoResource', 'model/HashMapstringobject', 'model/Timestamp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DeviceDisplayConfSubResource'), require('./DeviceDisplayCustomLogoResource'), require('./HashMapstringobject'), require('./Timestamp'));
  } else {
    // Browser globals (root is window)
    if (!root.MagicInfoApi) {
      root.MagicInfoApi = {};
    }
    root.MagicInfoApi.DeviceDisplayConfResource = factory(root.MagicInfoApi.ApiClient, root.MagicInfoApi.DeviceDisplayConfSubResource, root.MagicInfoApi.DeviceDisplayCustomLogoResource, root.MagicInfoApi.HashMapstringobject, root.MagicInfoApi.Timestamp);
  }
}(this, function(ApiClient, DeviceDisplayConfSubResource, DeviceDisplayCustomLogoResource, HashMapstringobject, Timestamp) {
  'use strict';




  /**
   * The DeviceDisplayConfResource model module.
   * @module model/DeviceDisplayConfResource
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>DeviceDisplayConfResource</code>.
   * @alias module:model/DeviceDisplayConfResource
   * @class
   */
  var exports = function() {
    var _this = this;


































































































  };

  /**
   * Constructs a <code>DeviceDisplayConfResource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceDisplayConfResource} obj Optional instance to populate.
   * @return {module:model/DeviceDisplayConfResource} The populated <code>DeviceDisplayConfResource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('advancedAutoPower')) {
        obj['advancedAutoPower'] = ApiClient.convertToType(data['advancedAutoPower'], 'Number');
      }
      if (data.hasOwnProperty('advancedFanControl')) {
        obj['advancedFanControl'] = ApiClient.convertToType(data['advancedFanControl'], 'Number');
      }
      if (data.hasOwnProperty('advancedFanSpeed')) {
        obj['advancedFanSpeed'] = ApiClient.convertToType(data['advancedFanSpeed'], 'Number');
      }
      if (data.hasOwnProperty('advancedOsdDisplayType')) {
        obj['advancedOsdDisplayType'] = DeviceDisplayConfSubResource.constructFromObject(data['advancedOsdDisplayType']);
      }
      if (data.hasOwnProperty('advancedReset')) {
        obj['advancedReset'] = ApiClient.convertToType(data['advancedReset'], 'Number');
      }
      if (data.hasOwnProperty('advancedRj45SettingRefresh')) {
        obj['advancedRj45SettingRefresh'] = ApiClient.convertToType(data['advancedRj45SettingRefresh'], 'Number');
      }
      if (data.hasOwnProperty('advancedStandBy')) {
        obj['advancedStandBy'] = ApiClient.convertToType(data['advancedStandBy'], 'Number');
      }
      if (data.hasOwnProperty('advancedUserAutoColor')) {
        obj['advancedUserAutoColor'] = ApiClient.convertToType(data['advancedUserAutoColor'], 'Number');
      }
      if (data.hasOwnProperty('autoSourceSwitching')) {
        obj['autoSourceSwitching'] = DeviceDisplayConfSubResource.constructFromObject(data['autoSourceSwitching']);
      }
      if (data.hasOwnProperty('basicDirectChannel')) {
        obj['basicDirectChannel'] = ApiClient.convertToType(data['basicDirectChannel'], 'String');
      }
      if (data.hasOwnProperty('basicMute')) {
        obj['basicMute'] = ApiClient.convertToType(data['basicMute'], 'Number');
      }
      if (data.hasOwnProperty('basicPanelStatus')) {
        obj['basicPanelStatus'] = ApiClient.convertToType(data['basicPanelStatus'], 'Number');
      }
      if (data.hasOwnProperty('basicPower')) {
        obj['basicPower'] = ApiClient.convertToType(data['basicPower'], 'String');
      }
      if (data.hasOwnProperty('basicSource')) {
        obj['basicSource'] = ApiClient.convertToType(data['basicSource'], 'Number');
      }
      if (data.hasOwnProperty('basicVolume')) {
        obj['basicVolume'] = ApiClient.convertToType(data['basicVolume'], 'Number');
      }
      if (data.hasOwnProperty('blackTone')) {
        obj['blackTone'] = ApiClient.convertToType(data['blackTone'], 'Number');
      }
      if (data.hasOwnProperty('brightnessLimit')) {
        obj['brightnessLimit'] = ApiClient.convertToType(data['brightnessLimit'], 'Number');
      }
      if (data.hasOwnProperty('chkSchChannel')) {
        obj['chkSchChannel'] = ApiClient.convertToType(data['chkSchChannel'], 'Number');
      }
      if (data.hasOwnProperty('customLogo')) {
        obj['customLogo'] = DeviceDisplayCustomLogoResource.constructFromObject(data['customLogo']);
      }
      if (data.hasOwnProperty('diagnosisAlarmTemperature')) {
        obj['diagnosisAlarmTemperature'] = ApiClient.convertToType(data['diagnosisAlarmTemperature'], 'Number');
      }
      if (data.hasOwnProperty('diagnosisDisplayStatus')) {
        obj['diagnosisDisplayStatus'] = ApiClient.convertToType(data['diagnosisDisplayStatus'], 'String');
      }
      if (data.hasOwnProperty('diagnosisMonitorTemperature')) {
        obj['diagnosisMonitorTemperature'] = ApiClient.convertToType(data['diagnosisMonitorTemperature'], 'Number');
      }
      if (data.hasOwnProperty('diagnosisPanelOnTime')) {
        obj['diagnosisPanelOnTime'] = ApiClient.convertToType(data['diagnosisPanelOnTime'], 'String');
      }
      if (data.hasOwnProperty('fleshTone')) {
        obj['fleshTone'] = ApiClient.convertToType(data['fleshTone'], 'Number');
      }
      if (data.hasOwnProperty('imageAuto')) {
        obj['imageAuto'] = ApiClient.convertToType(data['imageAuto'], 'Number');
      }
      if (data.hasOwnProperty('imageCoarse')) {
        obj['imageCoarse'] = ApiClient.convertToType(data['imageCoarse'], 'Number');
      }
      if (data.hasOwnProperty('imageFine')) {
        obj['imageFine'] = ApiClient.convertToType(data['imageFine'], 'Number');
      }
      if (data.hasOwnProperty('imageHpos')) {
        obj['imageHpos'] = ApiClient.convertToType(data['imageHpos'], 'Number');
      }
      if (data.hasOwnProperty('imageVpos')) {
        obj['imageVpos'] = ApiClient.convertToType(data['imageVpos'], 'Number');
      }
      if (data.hasOwnProperty('inputSourceList')) {
        obj['inputSourceList'] = ApiClient.convertToType(data['inputSourceList'], [HashMapstringobject]);
      }
      if (data.hasOwnProperty('maxPowerSaving')) {
        obj['maxPowerSaving'] = ApiClient.convertToType(data['maxPowerSaving'], 'Number');
      }
      if (data.hasOwnProperty('mdcUpdateTime')) {
        obj['mdcUpdateTime'] = Timestamp.constructFromObject(data['mdcUpdateTime']);
      }
      if (data.hasOwnProperty('miscAllLock')) {
        obj['miscAllLock'] = ApiClient.convertToType(data['miscAllLock'], 'Number');
      }
      if (data.hasOwnProperty('miscOsd')) {
        obj['miscOsd'] = ApiClient.convertToType(data['miscOsd'], 'Number');
      }
      if (data.hasOwnProperty('miscPanelLock')) {
        obj['miscPanelLock'] = ApiClient.convertToType(data['miscPanelLock'], 'Number');
      }
      if (data.hasOwnProperty('miscRemocon')) {
        obj['miscRemocon'] = ApiClient.convertToType(data['miscRemocon'], 'Number');
      }
      if (data.hasOwnProperty('mntAuto')) {
        obj['mntAuto'] = DeviceDisplayConfSubResource.constructFromObject(data['mntAuto']);
      }
      if (data.hasOwnProperty('mntFormat')) {
        obj['mntFormat'] = ApiClient.convertToType(data['mntFormat'], 'Number');
      }
      if (data.hasOwnProperty('mntManual')) {
        obj['mntManual'] = ApiClient.convertToType(data['mntManual'], 'Number');
      }
      if (data.hasOwnProperty('mntPixelShift')) {
        obj['mntPixelShift'] = DeviceDisplayConfSubResource.constructFromObject(data['mntPixelShift']);
      }
      if (data.hasOwnProperty('mntSafetyLock')) {
        obj['mntSafetyLock'] = ApiClient.convertToType(data['mntSafetyLock'], 'Number');
      }
      if (data.hasOwnProperty('mntSafetyScreenRun')) {
        obj['mntSafetyScreenRun'] = ApiClient.convertToType(data['mntSafetyScreenRun'], 'Number');
      }
      if (data.hasOwnProperty('mntSafetyScreenTimer')) {
        obj['mntSafetyScreenTimer'] = DeviceDisplayConfSubResource.constructFromObject(data['mntSafetyScreenTimer']);
      }
      if (data.hasOwnProperty('mntVideoWall')) {
        obj['mntVideoWall'] = ApiClient.convertToType(data['mntVideoWall'], 'Number');
      }
      if (data.hasOwnProperty('networkStandbyMode')) {
        obj['networkStandbyMode'] = ApiClient.convertToType(data['networkStandbyMode'], 'String');
      }
      if (data.hasOwnProperty('pcMode')) {
        obj['pcMode'] = ApiClient.convertToType(data['pcMode'], 'Boolean');
      }
      if (data.hasOwnProperty('pipControl')) {
        obj['pipControl'] = ApiClient.convertToType(data['pipControl'], 'Number');
      }
      if (data.hasOwnProperty('pipPosition')) {
        obj['pipPosition'] = ApiClient.convertToType(data['pipPosition'], 'Number');
      }
      if (data.hasOwnProperty('pipSize')) {
        obj['pipSize'] = ApiClient.convertToType(data['pipSize'], 'Number');
      }
      if (data.hasOwnProperty('pipSource')) {
        obj['pipSource'] = ApiClient.convertToType(data['pipSource'], 'Number');
      }
      if (data.hasOwnProperty('pipSwap')) {
        obj['pipSwap'] = ApiClient.convertToType(data['pipSwap'], 'Number');
      }
      if (data.hasOwnProperty('ppcBlue')) {
        obj['ppcBlue'] = ApiClient.convertToType(data['ppcBlue'], 'Number');
      }
      if (data.hasOwnProperty('ppcBrightness')) {
        obj['ppcBrightness'] = ApiClient.convertToType(data['ppcBrightness'], 'Number');
      }
      if (data.hasOwnProperty('ppcColorTemperature')) {
        obj['ppcColorTemperature'] = ApiClient.convertToType(data['ppcColorTemperature'], 'Number');
      }
      if (data.hasOwnProperty('ppcColortone')) {
        obj['ppcColortone'] = ApiClient.convertToType(data['ppcColortone'], 'Number');
      }
      if (data.hasOwnProperty('ppcContrast')) {
        obj['ppcContrast'] = ApiClient.convertToType(data['ppcContrast'], 'Number');
      }
      if (data.hasOwnProperty('ppcGamma')) {
        obj['ppcGamma'] = ApiClient.convertToType(data['ppcGamma'], 'Number');
      }
      if (data.hasOwnProperty('ppcGreen')) {
        obj['ppcGreen'] = ApiClient.convertToType(data['ppcGreen'], 'Number');
      }
      if (data.hasOwnProperty('ppcHdmiBlackLevel')) {
        obj['ppcHdmiBlackLevel'] = ApiClient.convertToType(data['ppcHdmiBlackLevel'], 'Number');
      }
      if (data.hasOwnProperty('ppcMagicBright')) {
        obj['ppcMagicBright'] = ApiClient.convertToType(data['ppcMagicBright'], 'Number');
      }
      if (data.hasOwnProperty('ppcRed')) {
        obj['ppcRed'] = ApiClient.convertToType(data['ppcRed'], 'Number');
      }
      if (data.hasOwnProperty('ppcSize')) {
        obj['ppcSize'] = ApiClient.convertToType(data['ppcSize'], 'Number');
      }
      if (data.hasOwnProperty('pvBrightness')) {
        obj['pvBrightness'] = ApiClient.convertToType(data['pvBrightness'], 'Number');
      }
      if (data.hasOwnProperty('pvColor')) {
        obj['pvColor'] = ApiClient.convertToType(data['pvColor'], 'Number');
      }
      if (data.hasOwnProperty('pvColorTemperature')) {
        obj['pvColorTemperature'] = ApiClient.convertToType(data['pvColorTemperature'], 'Number');
      }
      if (data.hasOwnProperty('pvColortone')) {
        obj['pvColortone'] = ApiClient.convertToType(data['pvColortone'], 'Number');
      }
      if (data.hasOwnProperty('pvContrast')) {
        obj['pvContrast'] = ApiClient.convertToType(data['pvContrast'], 'Number');
      }
      if (data.hasOwnProperty('pvDigitalnr')) {
        obj['pvDigitalnr'] = ApiClient.convertToType(data['pvDigitalnr'], 'Number');
      }
      if (data.hasOwnProperty('pvFilmmode')) {
        obj['pvFilmmode'] = ApiClient.convertToType(data['pvFilmmode'], 'Number');
      }
      if (data.hasOwnProperty('pvHdmiBlackLevel')) {
        obj['pvHdmiBlackLevel'] = ApiClient.convertToType(data['pvHdmiBlackLevel'], 'Number');
      }
      if (data.hasOwnProperty('pvMode')) {
        obj['pvMode'] = ApiClient.convertToType(data['pvMode'], 'Number');
      }
      if (data.hasOwnProperty('pvMpegNoiseFilter')) {
        obj['pvMpegNoiseFilter'] = ApiClient.convertToType(data['pvMpegNoiseFilter'], 'Number');
      }
      if (data.hasOwnProperty('pvSharpness')) {
        obj['pvSharpness'] = ApiClient.convertToType(data['pvSharpness'], 'Number');
      }
      if (data.hasOwnProperty('pvSize')) {
        obj['pvSize'] = ApiClient.convertToType(data['pvSize'], 'Number');
      }
      if (data.hasOwnProperty('pvTint')) {
        obj['pvTint'] = ApiClient.convertToType(data['pvTint'], 'Number');
      }
      if (data.hasOwnProperty('pvVideoPicturePositionSize')) {
        obj['pvVideoPicturePositionSize'] = ApiClient.convertToType(data['pvVideoPicturePositionSize'], 'String');
      }
      if (data.hasOwnProperty('rgbOnlyMode')) {
        obj['rgbOnlyMode'] = ApiClient.convertToType(data['rgbOnlyMode'], 'Number');
      }
      if (data.hasOwnProperty('sbBgain')) {
        obj['sbBgain'] = ApiClient.convertToType(data['sbBgain'], 'Number');
      }
      if (data.hasOwnProperty('sbBoffset')) {
        obj['sbBoffset'] = ApiClient.convertToType(data['sbBoffset'], 'Number');
      }
      if (data.hasOwnProperty('sbGain')) {
        obj['sbGain'] = ApiClient.convertToType(data['sbGain'], 'Number');
      }
      if (data.hasOwnProperty('sbGgain')) {
        obj['sbGgain'] = ApiClient.convertToType(data['sbGgain'], 'Number');
      }
      if (data.hasOwnProperty('sbGoffset')) {
        obj['sbGoffset'] = ApiClient.convertToType(data['sbGoffset'], 'Number');
      }
      if (data.hasOwnProperty('sbRgain')) {
        obj['sbRgain'] = ApiClient.convertToType(data['sbRgain'], 'Number');
      }
      if (data.hasOwnProperty('sbRoffset')) {
        obj['sbRoffset'] = ApiClient.convertToType(data['sbRoffset'], 'Number');
      }
      if (data.hasOwnProperty('sbSharp')) {
        obj['sbSharp'] = ApiClient.convertToType(data['sbSharp'], 'Number');
      }
      if (data.hasOwnProperty('sbStatus')) {
        obj['sbStatus'] = ApiClient.convertToType(data['sbStatus'], 'Number');
      }
      if (data.hasOwnProperty('screenFreeze')) {
        obj['screenFreeze'] = ApiClient.convertToType(data['screenFreeze'], 'Number');
      }
      if (data.hasOwnProperty('screenMute')) {
        obj['screenMute'] = ApiClient.convertToType(data['screenMute'], 'Number');
      }
      if (data.hasOwnProperty('soundBalance')) {
        obj['soundBalance'] = ApiClient.convertToType(data['soundBalance'], 'Number');
      }
      if (data.hasOwnProperty('soundBass')) {
        obj['soundBass'] = ApiClient.convertToType(data['soundBass'], 'Number');
      }
      if (data.hasOwnProperty('soundEffect')) {
        obj['soundEffect'] = ApiClient.convertToType(data['soundEffect'], 'Number');
      }
      if (data.hasOwnProperty('soundMode')) {
        obj['soundMode'] = ApiClient.convertToType(data['soundMode'], 'Number');
      }
      if (data.hasOwnProperty('soundSrs')) {
        obj['soundSrs'] = ApiClient.convertToType(data['soundSrs'], 'Number');
      }
      if (data.hasOwnProperty('soundTreble')) {
        obj['soundTreble'] = ApiClient.convertToType(data['soundTreble'], 'Number');
      }
      if (data.hasOwnProperty('touchControlLock')) {
        obj['touchControlLock'] = ApiClient.convertToType(data['touchControlLock'], 'Number');
      }
      if (data.hasOwnProperty('webBrowserUrl')) {
        obj['webBrowserUrl'] = DeviceDisplayConfSubResource.constructFromObject(data['webBrowserUrl']);
      }
      if (data.hasOwnProperty('webcam')) {
        obj['webcam'] = ApiClient.convertToType(data['webcam'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {Number} advancedAutoPower
   */
  exports.prototype['advancedAutoPower'] = undefined;
  /**
   * @member {Number} advancedFanControl
   */
  exports.prototype['advancedFanControl'] = undefined;
  /**
   * @member {Number} advancedFanSpeed
   */
  exports.prototype['advancedFanSpeed'] = undefined;
  /**
   * @member {module:model/DeviceDisplayConfSubResource} advancedOsdDisplayType
   */
  exports.prototype['advancedOsdDisplayType'] = undefined;
  /**
   * @member {Number} advancedReset
   */
  exports.prototype['advancedReset'] = undefined;
  /**
   * @member {Number} advancedRj45SettingRefresh
   */
  exports.prototype['advancedRj45SettingRefresh'] = undefined;
  /**
   * @member {Number} advancedStandBy
   */
  exports.prototype['advancedStandBy'] = undefined;
  /**
   * @member {Number} advancedUserAutoColor
   */
  exports.prototype['advancedUserAutoColor'] = undefined;
  /**
   * @member {module:model/DeviceDisplayConfSubResource} autoSourceSwitching
   */
  exports.prototype['autoSourceSwitching'] = undefined;
  /**
   * 1;chkAtvDtv(0:false, 1:true);chkAirCable(0:false, 1:true);tv_channel_major_channel;tv_channel_minor_channel[Channel] button on display list tab. (Modification is only allowed with TV or DTV inpusource
   * @member {String} basicDirectChannel
   */
  exports.prototype['basicDirectChannel'] = undefined;
  /**
   * 0 : mute off
   * @member {Number} basicMute
   */
  exports.prototype['basicMute'] = undefined;
  /**
   * 0 : panel off
   * @member {Number} basicPanelStatus
   */
  exports.prototype['basicPanelStatus'] = undefined;
  /**
   * 0 : power off
   * @member {String} basicPower
   */
  exports.prototype['basicPower'] = undefined;
  /**
   * MagicInfo-Lite/S
   * @member {Number} basicSource
   */
  exports.prototype['basicSource'] = undefined;
  /**
   * volume value
   * @member {Number} basicVolume
   */
  exports.prototype['basicVolume'] = undefined;
  /**
   * @member {Number} blackTone
   */
  exports.prototype['blackTone'] = undefined;
  /**
   * @member {Number} brightnessLimit
   */
  exports.prototype['brightnessLimit'] = undefined;
  /**
   * @member {Number} chkSchChannel
   */
  exports.prototype['chkSchChannel'] = undefined;
  /**
   * @member {module:model/DeviceDisplayCustomLogoResource} customLogo
   */
  exports.prototype['customLogo'] = undefined;
  /**
   * @member {Number} diagnosisAlarmTemperature
   */
  exports.prototype['diagnosisAlarmTemperature'] = undefined;
  /**
   * @member {String} diagnosisDisplayStatus
   */
  exports.prototype['diagnosisDisplayStatus'] = undefined;
  /**
   * @member {Number} diagnosisMonitorTemperature
   */
  exports.prototype['diagnosisMonitorTemperature'] = undefined;
  /**
   * @member {String} diagnosisPanelOnTime
   */
  exports.prototype['diagnosisPanelOnTime'] = undefined;
  /**
   * @member {Number} fleshTone
   */
  exports.prototype['fleshTone'] = undefined;
  /**
   * @member {Number} imageAuto
   */
  exports.prototype['imageAuto'] = undefined;
  /**
   * @member {Number} imageCoarse
   */
  exports.prototype['imageCoarse'] = undefined;
  /**
   * @member {Number} imageFine
   */
  exports.prototype['imageFine'] = undefined;
  /**
   * @member {Number} imageHpos
   */
  exports.prototype['imageHpos'] = undefined;
  /**
   * @member {Number} imageVpos
   */
  exports.prototype['imageVpos'] = undefined;
  /**
   * @member {Array.<module:model/HashMapstringobject>} inputSourceList
   */
  exports.prototype['inputSourceList'] = undefined;
  /**
   * @member {Number} maxPowerSaving
   */
  exports.prototype['maxPowerSaving'] = undefined;
  /**
   * @member {module:model/Timestamp} mdcUpdateTime
   */
  exports.prototype['mdcUpdateTime'] = undefined;
  /**
   * @member {Number} miscAllLock
   */
  exports.prototype['miscAllLock'] = undefined;
  /**
   * @member {Number} miscOsd
   */
  exports.prototype['miscOsd'] = undefined;
  /**
   * @member {Number} miscPanelLock
   */
  exports.prototype['miscPanelLock'] = undefined;
  /**
   * @member {Number} miscRemocon
   */
  exports.prototype['miscRemocon'] = undefined;
  /**
   * @member {module:model/DeviceDisplayConfSubResource} mntAuto
   */
  exports.prototype['mntAuto'] = undefined;
  /**
   * @member {Number} mntFormat
   */
  exports.prototype['mntFormat'] = undefined;
  /**
   * 0~100
   * @member {Number} mntManual
   */
  exports.prototype['mntManual'] = undefined;
  /**
   * @member {module:model/DeviceDisplayConfSubResource} mntPixelShift
   */
  exports.prototype['mntPixelShift'] = undefined;
  /**
   * @member {Number} mntSafetyLock
   */
  exports.prototype['mntSafetyLock'] = undefined;
  /**
   * @member {Number} mntSafetyScreenRun
   */
  exports.prototype['mntSafetyScreenRun'] = undefined;
  /**
   * @member {module:model/DeviceDisplayConfSubResource} mntSafetyScreenTimer
   */
  exports.prototype['mntSafetyScreenTimer'] = undefined;
  /**
   * @member {Number} mntVideoWall
   */
  exports.prototype['mntVideoWall'] = undefined;
  /**
   * N: not supported, 0: off, 1: on
   * @member {String} networkStandbyMode
   */
  exports.prototype['networkStandbyMode'] = undefined;
  /**
   * @member {Boolean} pcMode
   */
  exports.prototype['pcMode'] = undefined;
  /**
   * @member {Number} pipControl
   */
  exports.prototype['pipControl'] = undefined;
  /**
   * @member {Number} pipPosition
   */
  exports.prototype['pipPosition'] = undefined;
  /**
   * @member {Number} pipSize
   */
  exports.prototype['pipSize'] = undefined;
  /**
   * @member {Number} pipSource
   */
  exports.prototype['pipSource'] = undefined;
  /**
   * @member {Number} pipSwap
   */
  exports.prototype['pipSwap'] = undefined;
  /**
   * @member {Number} ppcBlue
   */
  exports.prototype['ppcBlue'] = undefined;
  /**
   * 0~100
   * @member {Number} ppcBrightness
   */
  exports.prototype['ppcBrightness'] = undefined;
  /**
   * if ppc_colortone not null - 253:254:35:255:45:0:55:1:65:2:75:3:85:4:95:5:105:6:115:7:125:8:135:9:145:16:155:160 - 2,800K:3,000K:3,500K:4,000K:4,500K:5,000K:5,500K:6,000K:6,500K:7,000K:7,500K:8,000K:8,500K:9,000K:9,500K:10,000K:10,500K:11,000K:11,500K:12,000K:12,500K:13,000K:13,500K:14,000K:14,500K:15,000K:15,500K:16,000K
   * @member {Number} ppcColorTemperature
   */
  exports.prototype['ppcColorTemperature'] = undefined;
  /**
   * if ppc_colortone not null - 1: cool1, 0: cool2, 2: normal, 3: warm1, 4: warm2, 80: off
   * @member {Number} ppcColortone
   */
  exports.prototype['ppcColortone'] = undefined;
  /**
   * 0~100
   * @member {Number} ppcContrast
   */
  exports.prototype['ppcContrast'] = undefined;
  /**
   * 0: natural, 1: gammaMode1, 2: gammaMode2, 3: gammaMode3, 4: gammaMode4, 5: gammaMode5, 17: -1, 18: -2, 19: -3, 20: -4, 21: -5, 32: custom
   * @member {Number} ppcGamma
   */
  exports.prototype['ppcGamma'] = undefined;
  /**
   * @member {Number} ppcGreen
   */
  exports.prototype['ppcGreen'] = undefined;
  /**
   * if Pv_hdmi_black_level value is null - 0: low, 1: normalelse 1: normal, 0: low
   * @member {Number} ppcHdmiBlackLevel
   */
  exports.prototype['ppcHdmiBlackLevel'] = undefined;
  /**
   * 16: entertainment, 17: internet, 18: text, 19: custom, 20: advertisement, 21: information, 22: calibration, 32: shopAndMall_video, 33: shopAndMall_text, 34: officeAndSchool_video, 35: officeAndSchool_text, 36: terminalAndStation_video, 37: terminalAndStation_text, 38: videowall_video, 39: videowall_text
   * @member {Number} ppcMagicBright
   */
  exports.prototype['ppcMagicBright'] = undefined;
  /**
   * @member {Number} ppcRed
   */
  exports.prototype['ppcRed'] = undefined;
  /**
   * 16: 16:9, 24: 4:3, 32: psize_original_ratio
   * @member {Number} ppcSize
   */
  exports.prototype['ppcSize'] = undefined;
  /**
   * 1~100
   * @member {Number} pvBrightness
   */
  exports.prototype['pvBrightness'] = undefined;
  /**
   * 1~100
   * @member {Number} pvColor
   */
  exports.prototype['pvColor'] = undefined;
  /**
   * @member {Number} pvColorTemperature
   */
  exports.prototype['pvColorTemperature'] = undefined;
  /**
   * 80:off, 1: cool, 2:normal
   * @member {Number} pvColortone
   */
  exports.prototype['pvColortone'] = undefined;
  /**
   * 1~100
   * @member {Number} pvContrast
   */
  exports.prototype['pvContrast'] = undefined;
  /**
   * 1: on, 0: off, 2: mdc_medium, 3: mdc_high, 4: autho, 5: mdc_auto_visual
   * @member {Number} pvDigitalnr
   */
  exports.prototype['pvDigitalnr'] = undefined;
  /**
   * 1: on, 0: off, 2: auto2, 3: mdc_cinema_smooth
   * @member {Number} pvFilmmode
   */
  exports.prototype['pvFilmmode'] = undefined;
  /**
   * if pv_hdmi_black_level value is null : not supported - 0: low, 1: normalelse 0: normal, 1: low, 2: auto
   * @member {Number} pvHdmiBlackLevel
   */
  exports.prototype['pvHdmiBlackLevel'] = undefined;
  /**
   * 0: dynamic, 1: mdc_pv_standard, 2: mdc_pv_movie, 3: custom, 4: mdc_pv_natural, 5: calibration, 32: shopAndMall_video, 33: shopAndMall_text, 34: officeAndSchool_video, 35: officeAndSchool_text, 36:terminalAndStation_video, 37: terminalAndStation_text, 38: videowall_video, 39: videowall_text
   * @member {Number} pvMode
   */
  exports.prototype['pvMode'] = undefined;
  /**
   * @member {Number} pvMpegNoiseFilter
   */
  exports.prototype['pvMpegNoiseFilter'] = undefined;
  /**
   * 1~100
   * @member {Number} pvSharpness
   */
  exports.prototype['pvSharpness'] = undefined;
  /**
   * 1: 16:9, 4: zoom, 5: zoom1, 6: zoom2, 9: screen_fit_just_scan1, 11: 4:3,12: wide_fit, 49: wide_zoom, 13: custom, 14: mdc_smart_view1, 15: mdc_smart_view2, 32: psize_original_ratio
   * @member {Number} pvSize
   */
  exports.prototype['pvSize'] = undefined;
  /**
   * 1~100
   * @member {Number} pvTint
   */
  exports.prototype['pvTint'] = undefined;
  /**
   * @member {String} pvVideoPicturePositionSize
   */
  exports.prototype['pvVideoPicturePositionSize'] = undefined;
  /**
   * @member {Number} rgbOnlyMode
   */
  exports.prototype['rgbOnlyMode'] = undefined;
  /**
   * 0~255
   * @member {Number} sbBgain
   */
  exports.prototype['sbBgain'] = undefined;
  /**
   * 0~255
   * @member {Number} sbBoffset
   */
  exports.prototype['sbBoffset'] = undefined;
  /**
   * 0~255
   * @member {Number} sbGain
   */
  exports.prototype['sbGain'] = undefined;
  /**
   * 0~255
   * @member {Number} sbGgain
   */
  exports.prototype['sbGgain'] = undefined;
  /**
   * 0~255
   * @member {Number} sbGoffset
   */
  exports.prototype['sbGoffset'] = undefined;
  /**
   * 0~255
   * @member {Number} sbRgain
   */
  exports.prototype['sbRgain'] = undefined;
  /**
   * 0~255
   * @member {Number} sbRoffset
   */
  exports.prototype['sbRoffset'] = undefined;
  /**
   * 0~255
   * @member {Number} sbSharp
   */
  exports.prototype['sbSharp'] = undefined;
  /**
   * @member {Number} sbStatus
   */
  exports.prototype['sbStatus'] = undefined;
  /**
   * @member {Number} screenFreeze
   */
  exports.prototype['screenFreeze'] = undefined;
  /**
   * @member {Number} screenMute
   */
  exports.prototype['screenMute'] = undefined;
  /**
   * @member {Number} soundBalance
   */
  exports.prototype['soundBalance'] = undefined;
  /**
   * @member {Number} soundBass
   */
  exports.prototype['soundBass'] = undefined;
  /**
   * @member {Number} soundEffect
   */
  exports.prototype['soundEffect'] = undefined;
  /**
   * 0: mdc_sound_standard, 1: mdc_sound_music, 2: mdc_sound_movie, 3: mdc_sound_speech, 4: custom, 5: amplify
   * @member {Number} soundMode
   */
  exports.prototype['soundMode'] = undefined;
  /**
   * 0: off, 1: on
   * @member {Number} soundSrs
   */
  exports.prototype['soundSrs'] = undefined;
  /**
   * @member {Number} soundTreble
   */
  exports.prototype['soundTreble'] = undefined;
  /**
   * @member {Number} touchControlLock
   */
  exports.prototype['touchControlLock'] = undefined;
  /**
   * @member {module:model/DeviceDisplayConfSubResource} webBrowserUrl
   */
  exports.prototype['webBrowserUrl'] = undefined;
  /**
   * @member {Boolean} webcam
   */
  exports.prototype['webcam'] = undefined;



  return exports;
}));


