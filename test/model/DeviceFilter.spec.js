/**
 * magic info api
 * magic info api
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MagicInfoApi);
  }
}(this, function(expect, MagicInfoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MagicInfoApi.DeviceFilter();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceFilter', function() {
    it('should create an instance of DeviceFilter', function() {
      // uncomment below and update the code to test DeviceFilter
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be.a(MagicInfoApi.DeviceFilter);
    });

    it('should have the property agentId (base name: "agentId")', function() {
      // uncomment below and update the code to test the property agentId
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property asState (base name: "asState")', function() {
      // uncomment below and update the code to test the property asState
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property cmd (base name: "cmd")', function() {
      // uncomment below and update the code to test the property cmd
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property commonSearchKeyword (base name: "commonSearchKeyword")', function() {
      // uncomment below and update the code to test the property commonSearchKeyword
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property consoleId (base name: "consoleId")', function() {
      // uncomment below and update the code to test the property consoleId
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property customInputVal (base name: "customInputVal")', function() {
      // uncomment below and update the code to test the property customInputVal
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property deviceId (base name: "deviceId")', function() {
      // uncomment below and update the code to test the property deviceId
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property deviceModelName (base name: "deviceModelName")', function() {
      // uncomment below and update the code to test the property deviceModelName
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property deviceType (base name: "deviceType")', function() {
      // uncomment below and update the code to test the property deviceType
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeArr (base name: "deviceTypeArr")', function() {
      // uncomment below and update the code to test the property deviceTypeArr
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expirationDate")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property filterGroupIds (base name: "filterGroupIds")', function() {
      // uncomment below and update the code to test the property filterGroupIds
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property groupId (base name: "groupId")', function() {
      // uncomment below and update the code to test the property groupId
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property groupMode (base name: "groupMode")', function() {
      // uncomment below and update the code to test the property groupMode
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property groupName (base name: "groupName")', function() {
      // uncomment below and update the code to test the property groupName
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property hasAlarmFilter (base name: "hasAlarmFilter")', function() {
      // uncomment below and update the code to test the property hasAlarmFilter
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property hasFunctionFilter (base name: "hasFunctionFilter")', function() {
      // uncomment below and update the code to test the property hasFunctionFilter
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property imageViewMode (base name: "imageViewMode")', function() {
      // uncomment below and update the code to test the property imageViewMode
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property isApproved (base name: "isApproved")', function() {
      // uncomment below and update the code to test the property isApproved
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property isRoot (base name: "isRoot")', function() {
      // uncomment below and update the code to test the property isRoot
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property locale (base name: "locale")', function() {
      // uncomment below and update the code to test the property locale
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property menu (base name: "menu")', function() {
      // uncomment below and update the code to test the property menu
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property orderDir (base name: "orderDir")', function() {
      // uncomment below and update the code to test the property orderDir
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property orgId (base name: "orgId")', function() {
      // uncomment below and update the code to test the property orgId
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "pageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property roleName (base name: "roleName")', function() {
      // uncomment below and update the code to test the property roleName
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property sortName (base name: "sortName")', function() {
      // uncomment below and update the code to test the property sortName
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property srcName (base name: "srcName")', function() {
      // uncomment below and update the code to test the property srcName
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property startIndex (base name: "startIndex")', function() {
      // uncomment below and update the code to test the property startIndex
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property statusViewMode (base name: "statusViewMode")', function() {
      // uncomment below and update the code to test the property statusViewMode
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property statusViewMode (base name: "status_view_mode")', function() {
      // uncomment below and update the code to test the property statusViewMode
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property tagFilter (base name: "tagFilter")', function() {
      // uncomment below and update the code to test the property tagFilter
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property tagFilterList (base name: "tagFilterList")', function() {
      // uncomment below and update the code to test the property tagFilterList
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property tagMode (base name: "tagMode")', function() {
      // uncomment below and update the code to test the property tagMode
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

    it('should have the property vwlGroup (base name: "vwlGroup")', function() {
      // uncomment below and update the code to test the property vwlGroup
      //var instane = new MagicInfoApi.DeviceFilter();
      //expect(instance).to.be();
    });

  });

}));
