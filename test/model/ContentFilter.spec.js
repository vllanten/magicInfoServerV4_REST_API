/**
 * magic info api
 * magic info api
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MagicInfoApi);
  }
}(this, function(expect, MagicInfoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MagicInfoApi.ContentFilter();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContentFilter', function() {
    it('should create an instance of ContentFilter', function() {
      // uncomment below and update the code to test ContentFilter
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be.a(MagicInfoApi.ContentFilter);
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property deviceType (base name: "deviceType")', function() {
      // uncomment below and update the code to test the property deviceType
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property deviceTypeVersion (base name: "deviceTypeVersion")', function() {
      // uncomment below and update the code to test the property deviceTypeVersion
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property groupId (base name: "groupId")', function() {
      // uncomment below and update the code to test the property groupId
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property groupType (base name: "groupType")', function() {
      // uncomment below and update the code to test the property groupType
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "mediaType")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property mediaTypeFilter (base name: "mediaTypeFilter")', function() {
      // uncomment below and update the code to test the property mediaTypeFilter
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property pageSize (base name: "pageSize")', function() {
      // uncomment below and update the code to test the property pageSize
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property searchText (base name: "searchText")', function() {
      // uncomment below and update the code to test the property searchText
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property selectId (base name: "selectId")', function() {
      // uncomment below and update the code to test the property selectId
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property sortColumn (base name: "sortColumn")', function() {
      // uncomment below and update the code to test the property sortColumn
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sortOrder")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property startIndex (base name: "startIndex")', function() {
      // uncomment below and update the code to test the property startIndex
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property tag (base name: "tag")', function() {
      // uncomment below and update the code to test the property tag
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new MagicInfoApi.ContentFilter();
      //expect(instance).to.be();
    });

  });

}));
