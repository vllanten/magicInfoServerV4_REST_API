/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DeviceControllerApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * MagicInfo Server V4 REST API
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.DeviceControllerApi');

goog.require('API.Client.DeviceApproveResource');
goog.require('API.Client.DeviceDisplayConfResource');
goog.require('API.Client.DeviceFilter');
goog.require('API.Client.DeviceGeneralConfResource');
goog.require('API.Client.DeviceLedCabinetResource');
goog.require('API.Client.DeviceSecurityConfResource');
goog.require('API.Client.DeviceSystemSetupConfResource');
goog.require('API.Client.DeviceTimeconfResource');
goog.require('API.Client.Error');
goog.require('API.Client.ResponseBody');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DeviceControllerApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DeviceControllerApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DeviceControllerApiBasePath')) :
                   'http://magicinfo.icluster.cl:7001/MagicInfo';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DeviceControllerApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DeviceControllerApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DeviceControllerApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * approveDevice
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceApproveResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.approveDeviceUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/approval'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling approveDeviceUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling approveDeviceUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * deleteDevice
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceFilter} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.deleteDeviceUsingDELETE = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling deleteDeviceUsingDELETE');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling deleteDeviceUsingDELETE');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * filterDeviceList
 * 
 * @param {!DeviceFilter} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.filterDeviceListUsingPOST = function(params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/filter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling filterDeviceListUsingPOST');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCabinetList
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceFilter} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCabinetListUsingPOST1 = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/cabinet'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCabinetListUsingPOST1');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling getCabinetListUsingPOST1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCurrentStatusDisplay
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCurrentStatusDisplayUsingGET1 = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/status/display/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCurrentStatusDisplayUsingGET1');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getCurrentStatusDisplayUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCurrentStatusDisplay
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCurrentStatusDisplayUsingGET3 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/status/display'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCurrentStatusDisplayUsingGET3');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCurrentStatusSecurity
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCurrentStatusSecurityUsingGET1 = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/status/security/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCurrentStatusSecurityUsingGET1');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getCurrentStatusSecurityUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCurrentStatusSecurity
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCurrentStatusSecurityUsingGET3 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/status/security'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCurrentStatusSecurityUsingGET3');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCurrentStatusTime
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCurrentStatusTimeUsingGET = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/status/time/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCurrentStatusTimeUsingGET');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getCurrentStatusTimeUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getCurrentStatusTime
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getCurrentStatusTimeUsingGET3 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/status/time'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getCurrentStatusTimeUsingGET3');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getDashboardDeviceInfo
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getDashboardDeviceInfoUsingGET = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/dashboard';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getDevice
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getDeviceUsingGET1 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getDeviceUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getDisplayControlInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getDisplayControlInfoUsingGET1 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/display'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getDisplayControlInfoUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getGeneralInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getGeneralInfoUsingGET1 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/general'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getGeneralInfoUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getSecurityControlInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getSecurityControlInfoUsingGET1 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/security'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getSecurityControlInfoUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getSetupInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getSetupInfoUsingGET1 = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/setup'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getSetupInfoUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getTimeInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getTimeInfoUsingGET = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/time'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getTimeInfoUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getUpdatedDisplayInfoResult
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getUpdatedDisplayInfoResultUsingGET1 = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/display/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getUpdatedDisplayInfoResultUsingGET1');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getUpdatedDisplayInfoResultUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getUpdatedGeneralInfoResult
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getUpdatedGeneralInfoResultUsingGET = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/general/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getUpdatedGeneralInfoResultUsingGET');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getUpdatedGeneralInfoResultUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getUpdatedSetupInfoResult
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getUpdatedSetupInfoResultUsingGET1 = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/setup/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getUpdatedSetupInfoResultUsingGET1');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getUpdatedSetupInfoResultUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getUpdatedTimeInfoResult
 * 
 * @param {!string} deviceId deviceId
 * @param {!string} requestId requestId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.getUpdatedTimeInfoResultUsingGET = function(deviceId, requestId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/time/{requestId}'
      .replace('{' + 'deviceId' + '}', String(deviceId))
      .replace('{' + 'requestId' + '}', String(requestId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling getUpdatedTimeInfoResultUsingGET');
  }
  // verify required parameter 'requestId' is set
  if (!requestId) {
    throw new Error('Missing required parameter requestId when calling getUpdatedTimeInfoResultUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * listAllDevice
 * 
 * @param {!number} startIndex startIndex
 * @param {!number} pageSize pageSize
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.listAllDeviceUsingGET = function(startIndex, pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'startIndex' is set
  if (!startIndex) {
    throw new Error('Missing required parameter startIndex when calling listAllDeviceUsingGET');
  }
  // verify required parameter 'pageSize' is set
  if (!pageSize) {
    throw new Error('Missing required parameter pageSize when calling listAllDeviceUsingGET');
  }
  if (startIndex !== undefined) {
    queryParameters['startIndex'] = startIndex;
  }

  if (pageSize !== undefined) {
    queryParameters['pageSize'] = pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * moveDevice
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceFilter} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.moveDeviceUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/move'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling moveDeviceUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling moveDeviceUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * startRmServerVnc
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.startRmServerVncUsingGET = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/rmserver/start'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling startRmServerVncUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * stopRmServerVnc
 * 
 * @param {!string} deviceId deviceId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.stopRmServerVncUsingGET = function(deviceId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/rmserver/stop'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling stopRmServerVncUsingGET');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateCabinetInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceLedCabinetResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateCabinetInfoUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/cabinet'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateCabinetInfoUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateCabinetInfoUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateDisplayInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceDisplayConfResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateDisplayInfoUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/display'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateDisplayInfoUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateDisplayInfoUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateGeneralInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceGeneralConfResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateGeneralInfoUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/general/info'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateGeneralInfoUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateGeneralInfoUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateGeneral
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceGeneralConfResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateGeneralUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/general'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateGeneralUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateGeneralUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateSecurityInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceSecurityConfResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateSecurityInfoUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/security'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateSecurityInfoUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateSecurityInfoUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateSetupInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceSystemSetupConfResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateSetupInfoUsingPUT = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/setup'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateSetupInfoUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateSetupInfoUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * updateTimeInfo
 * 
 * @param {!string} deviceId deviceId
 * @param {!DeviceTimeconfResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.DeviceControllerApi.prototype.updateTimeInfoUsingPUT1 = function(deviceId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/rms/devices/{deviceId}/time'
      .replace('{' + 'deviceId' + '}', String(deviceId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deviceId' is set
  if (!deviceId) {
    throw new Error('Missing required parameter deviceId when calling updateTimeInfoUsingPUT1');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling updateTimeInfoUsingPUT1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
