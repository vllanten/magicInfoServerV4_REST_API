/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.MessageScheduleControllerApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * MagicInfo Server V4 REST API
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.MessageScheduleControllerApi');

goog.require('API.Client.Error');
goog.require('API.Client.MessageScheduleFilter');
goog.require('API.Client.MessageScheduleResource');
goog.require('API.Client.ResponseBody');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.MessageScheduleControllerApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('MessageScheduleControllerApiBasePath') ?
                   /** @type {!string} */ ($injector.get('MessageScheduleControllerApiBasePath')) :
                   'http://magicinfo.icluster.cl:7001/MagicInfo';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('MessageScheduleControllerApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('MessageScheduleControllerApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.MessageScheduleControllerApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * copyMessageSchedule
 * 
 * @param {!string} messageId messageId
 * @param {!MessageScheduleResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.copyMessageScheduleUsingPUT1 = function(messageId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages/{messageId}/copy'
      .replace('{' + 'messageId' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling copyMessageScheduleUsingPUT1');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling copyMessageScheduleUsingPUT1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * createMessageSchedule
 * 
 * @param {!MessageScheduleResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.createMessageScheduleUsingPOST = function(params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling createMessageScheduleUsingPOST');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * deleteMessageSchedule
 * 
 * @param {!string} messageId messageId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.deleteMessageScheduleUsingDELETE1 = function(messageId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages/{messageId}'
      .replace('{' + 'messageId' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling deleteMessageScheduleUsingDELETE1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * deployMessageSchedule
 * 
 * @param {!string} messageId messageId
 * @param {!MessageScheduleResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.deployMessageScheduleUsingPUT = function(messageId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages/{messageId}/deploy'
      .replace('{' + 'messageId' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling deployMessageScheduleUsingPUT');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling deployMessageScheduleUsingPUT');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * editMessageSchedule
 * 
 * @param {!string} messageId messageId
 * @param {!MessageScheduleResource} params params
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.editMessageScheduleUsingPUT1 = function(messageId, params, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages/{messageId}'
      .replace('{' + 'messageId' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling editMessageScheduleUsingPUT1');
  }
  // verify required parameter 'params' is set
  if (!params) {
    throw new Error('Missing required parameter params when calling editMessageScheduleUsingPUT1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: params,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * getMessageInfo
 * 
 * @param {!string} messageId messageId
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.getMessageInfoUsingGET1 = function(messageId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages/{messageId}'
      .replace('{' + 'messageId' + '}', String(messageId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'messageId' is set
  if (!messageId) {
    throw new Error('Missing required parameter messageId when calling getMessageInfoUsingGET1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * listAllMessageSchedule
 * 
 * @param {!number} startIndex startIndex
 * @param {!number} pageSize pageSize
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.listAllMessageScheduleUsingGET = function(startIndex, pageSize, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'startIndex' is set
  if (!startIndex) {
    throw new Error('Missing required parameter startIndex when calling listAllMessageScheduleUsingGET');
  }
  // verify required parameter 'pageSize' is set
  if (!pageSize) {
    throw new Error('Missing required parameter pageSize when calling listAllMessageScheduleUsingGET');
  }
  if (startIndex !== undefined) {
    queryParameters['startIndex'] = startIndex;
  }

  if (pageSize !== undefined) {
    queryParameters['pageSize'] = pageSize;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * listMessage
 * 
 * @param {!MessageScheduleFilter} filter filter
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ResponseBody>}
 */
API.Client.MessageScheduleControllerApi.prototype.listMessageUsingPOST = function(filter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/restapi/v1.0/dms/schedule/messages/filter';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'filter' is set
  if (!filter) {
    throw new Error('Missing required parameter filter when calling listMessageUsingPOST');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: filter,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
